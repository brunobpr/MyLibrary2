/**
 * @author Bruno Pereira Ribeiro - 2017138
 */

const loger = require("morgan");
const cors = require("cors");
const express = require('express');
const http = require('http');
const mongoose = require('mongoose');
const bodyParser = require("body-parser");

var app = express();
var port = 3000;



app.use(bodyParser.json());
app.use(require('./routes'));

/**
 * Routes to each pages
 */
var indexRouter = require('./routes/index');
var fav = require('./routes/fav');
var library = require('./routes/library');
var new_book = require('./routes/new_book');
app.use('/', indexRouter);
app.use('/fav', fav);
app.use('/library', library);
app.use('/new_book', new_book);
/**
 * The code below was auto generated by Eclipse IDE when setting up an EJS template
 * lines 28-35 / 146-157
 * Create HTTP server.
 */
server.listen(port);
server.on('listening', onListening);
app.set('port', port);
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.urlencoded({extended: true}));
//Sanitizing using NoSave
app.use(expAutoSan.all);

//Post request to add a new book
app.post('/post/book', [
    //.isLength is going to check if the input matches with the mininum lenght
    //.trim cuts white spaces before and after the input
    //.blacklist('.') will block any input with a dot ...... json files dont like dots.
    check('title').isLength({min: 1}).trim().blacklist('.'),
    check('subtitle').trim().blacklist('.'),
    check('author').isLength({min: 1}).trim(),
    check('publisher').isLength({min: 1}).trim(),
    check('year_edition').isLength({min: 1}).trim(),
], (req, res) => {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
        return res.status(422).json({errors: errors.array()})
    }
    // Creating secure and sanitezed input using Nosave and storing it into variables
    const title = req.autosan.body.title;
    const subtitle = req.autosan.body.subtitle;
    const author = req.autosan.body.author;
    const publisher = req.autosan.body.publisher;
    const year_edition = req.autosan.body.year_edition;
    const read_year = req.autosan.body.read_year;
    //Reading the books.json file and getting its data in 
    fs.readFile('books.json', 'utf8', function readFileCallback(err, data) {
        if (err) {
            s
            console.log(err);
        } else {
            // Transforming the JSON file into a JavaScript string
            new_book = JSON.parse(data);
            // Adding the new book to the current JavaScript Object
            new_book.books.push({
                'Title': title,
                'Subtitle': subtitle,
                "Autor": author,
                "Publisher": publisher,
                "Year": year_edition,
                "ReadYear": read_year
            });
            //Converting the JS string into a JSON.
            //Writing the content back (old + new) back to the file
            fs.writeFile('books.json', JSON.stringify(new_book), function (err) {
                if (err) throw err;
            })
        }
    });
    res.redirect('back');
})

//Post request to update an existing book
app.post('/update/book', [
    // Sanitising using express-validator
    //.isLength is going to check if the input matches with the mininum lenght
    //.trim cuts white spaces before and after the input
    //.blacklist('.') will block any input with a dot ...... json files dont like dots.
    check('title').isLength({min: 1}).trim().blacklist('.'),
    check('subtitle').trim().blacklist('.'),
    check('author').isLength({min: 1}).trim(),
    check('publisher').isLength({min: 1}).trim(),
    check('year_edition').isLength({min: 1}).trim(),
], (req, res) => {
    const errors = validationResult(req)
    if (!errors.isEmpty()) {
        return res.status(422).json({errors: errors.array()})
    }
    // Creating secure and sanitezed input using Nosave and storing it into variables
    const title = req.autosan.body.title;
    const subtitle = req.autosan.body.subtitle;
    const author = req.autosan.body.author;
    const publisher = req.autosan.body.publisher;
    const year_edition = req.autosan.body.year_edition;
    const read_year = req.autosan.body.read_year;
    //The id is coming from an hidden input field in the form. It starts from 0 and for each book it is incremented by 1
    const id = req.body.id;
    //Reading the books.json file and getting its data in
    var old = require('./books.json');
    // Changing the value of the book in the position [id];
    old.books[id].Title = title;
    old.books[id].Subtitle = subtitle;
    old.books[id].Autor = author;
    old.books[id].Publisher = publisher;
    old.books[id].Year = year_edition;
    old.books[id].ReadYear = read_year;
    //Writing the new file back of the same name, so it will overwrite the old one
    fs.writeFile('books.json', JSON.stringify(old), function (err) {
        if (err) throw err;
    });
    //Redirecting to the new book registration page
    res.redirect('back');
});

app.post('/delete/book', (req, res) => {
    // Creating variables regarding the user input
    const id = req.body.id;
    // Reading the books.json file and getting its data in
    var old = require('./books.json');
    // Changing the value of the book in the position [id];
    old.books.splice(id, 1);
    // Writing the new file back of the same name, so it will overwrite the old one
    fs.writeFile('books.json', JSON.stringify(old), function (err) {
        if (err) throw err;
    });
    //Redirecting to the edit page
    res.redirect('back');
});

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    console.log('Server is running... at port ' + port)
    console.log('Welcome to My Library!')
    console.log('Bruno Pereira Ribeiro - 2017138')
}

module.exports = app;
